name: Cd Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Build project
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ github.ref_name }}-node${{ matrix.node-version }}
        path: |
          dist/
          package.json
          package-lock.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'staging') }}
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    
    steps:
    - name: Deploy to VM
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DBMART_HOST }}
        username: ${{ secrets.DBMART_USERNAME }}
        key: ${{ secrets.DBMART_SSH_KEY }}
        port: ${{ secrets.DBMART_PORT }}
        script: |
          cd ~/CLH_Website
          echo "Checking out branch ${{ github.ref_name }}..."
          git checkout ${{ github.ref_name }}
          echo "Pulling latest changes..."
          git pull origin ${{ github.ref_name }}

          echo "Stopping old containers..."
          echo "Using Compose file: ${{ env.COMPOSE_FILE }}"
          docker compose -f ${{ env.COMPOSE_FILE }} down

          echo "Building with latest changes..."
          docker compose -f ${{ env.COMPOSE_FILE }} up --build -d --remove-orphans --no-cache
          docker compose -f ${{ env.COMPOSE_FILE }} build --no-cache
          docker compose -f ${{ env.COMPOSE_FILE }} up -d --remove-orphans

          echo "Restarting Nginx..."
          sudo systemctl reload nginx

          echo "Cleaning up old Docker images..."
          docker image prune -af --filter "until=24h"